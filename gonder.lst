CCS PCM C Compiler, Version 4.068, 9702               07-Tem-14 10:07

               Filename: C:\Users\Büþra1\Desktop\programlar\628-lcd-rs\gonder.lst

               ROM used: 332 words (16%)
                         Largest free fragment is 1716
               RAM used: 7 (3%) at main() level
                         12 (5%) worst case
               Stack:    3 locations

*
0000:  MOVLW  00
0001:  MOVWF  0A
0002:  GOTO   112
0003:  NOP
.................... #include <16f628A.h> 
.................... //////// Standard Header file for the PIC16F628A device //////////////// 
.................... #device PIC16F628A 
.................... #list 
....................  
.................... #fuses INTRC_IO,NOMCLR 
.................... #use delay(clock=4M) 
0026:  MOVLW  25
0027:  MOVWF  04
0028:  BCF    03.7
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   03A
002C:  MOVLW  01
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  4A
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  GOTO   038
0038:  DECFSZ 00,F
0039:  GOTO   02C
003A:  RETLW  00
.................... #use rs232 (baud=2400, xmit=pin_b2, rcv=pin_b1, parity=N) 
.................... #include <lcd2x16.c> 
.................... /****************************BEST ENGINEER*************************************/ 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //                             TR_LCD.c                                    ///// 
.................... //                                                                         ///// 
.................... // Bu LCD sürücü dosyasý 2x16 HD44780 uyumlu LCD’ler                       ///// 
.................... // içindir. LCD’ye sadece yazma yapýlacaðý için R/W Logic0                 ///// 
.................... // konumunda durmasý için þaseye baðlanmalýdýr.                            ///// 
.................... //    lcd_ayarla(); bu komut LCD'nin baþlangýç ayarlarýný yapmak içindir.  ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //    lcd_sil(); bu komut Lcd'yi silmek için kullanýlýr.                   ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //    adres(x,y); komutuyla imleç istenilen adrese getirilebilir.          ///// 
.................... // Bu komutta y satýr bilgisini, x sütun bilgisini ifade eder.             ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //    lcd_yaz(" "); komutuyla iki týrnak arasýna sadece yazýsal ifadeler   ///// 
.................... // kullanýlabilir.Örneðin bu komutla %sabitleri kullanýlamaz.              ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... //    printf(lcd_yaz,"  "); komutuyla yazýlar hemde deðiþkenler            ///// 
.................... // gösterilebilir. %sabitleri kullanýlabilir.Ancak \sabitleri kullanýlamaz ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
.................... // Ýstenilen pinler aþaðýdaki define tanýmlamalarýndan ayarlannabilir.     ///// 
.................... // LCD..pin..baðlanýlacak pin                                              ///// 
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... #define  d4  pin_b4 
.................... #define  d5  pin_b5 
.................... #define  d6  pin_b6 
.................... #define  d7  pin_b7 
.................... #define  e   pin_a1  
.................... #define  rs  pin_a0 
....................  
.................... void data_tara(byte dsg) 
.................... { 
....................    output_bit(d4,bit_test(dsg,0)); 
003B:  BTFSC  26.0
003C:  GOTO   03F
003D:  BCF    06.4
003E:  GOTO   040
003F:  BSF    06.4
0040:  BSF    03.5
0041:  BCF    06.4
....................    output_bit(d5,bit_test(dsg,1)); 
0042:  BCF    03.5
0043:  BTFSC  26.1
0044:  GOTO   047
0045:  BCF    06.5
0046:  GOTO   048
0047:  BSF    06.5
0048:  BSF    03.5
0049:  BCF    06.5
....................    output_bit(d6,bit_test(dsg,2)); 
004A:  BCF    03.5
004B:  BTFSC  26.2
004C:  GOTO   04F
004D:  BCF    06.6
004E:  GOTO   050
004F:  BSF    06.6
0050:  BSF    03.5
0051:  BCF    06.6
....................    output_bit(d7,bit_test(dsg,3)); 
0052:  BCF    03.5
0053:  BTFSC  26.3
0054:  GOTO   057
0055:  BCF    06.7
0056:  GOTO   058
0057:  BSF    06.7
0058:  BSF    03.5
0059:  BCF    06.7
.................... } 
005A:  BCF    03.5
005B:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void lcd_command(byte m) 
.................... {    
....................    data_tara(m>>4);    
005C:  SWAPF  24,W
005D:  MOVWF  25
005E:  MOVLW  0F
005F:  ANDWF  25,F
0060:  MOVF   25,W
0061:  MOVWF  26
0062:  CALL   03B
....................    output_bit(rs,0);        
0063:  BCF    05.0
0064:  BSF    03.5
0065:  BCF    05.0
....................    delay_cycles(1);          
0066:  NOP
....................    output_bit(e,1);        
0067:  BCF    03.5
0068:  BSF    05.1
0069:  BSF    03.5
006A:  BCF    05.1
....................    delay_cycles(1);       
006B:  NOP
....................    output_bit(e,0); 
006C:  BCF    03.5
006D:  BCF    05.1
006E:  BSF    03.5
006F:  BCF    05.1
....................    delay_ms(2);           
0070:  MOVLW  02
0071:  BCF    03.5
0072:  MOVWF  25
0073:  CALL   026
....................  
....................    data_tara(m&0x0F);  
0074:  MOVF   24,W
0075:  ANDLW  0F
0076:  MOVWF  25
0077:  MOVWF  26
0078:  CALL   03B
....................    output_bit(rs,0);         
0079:  BCF    05.0
007A:  BSF    03.5
007B:  BCF    05.0
....................    delay_cycles(1);            
007C:  NOP
....................    output_bit(e,1);        
007D:  BCF    03.5
007E:  BSF    05.1
007F:  BSF    03.5
0080:  BCF    05.1
....................    delay_cycles(1);       
0081:  NOP
....................    output_bit(e,0); 
0082:  BCF    03.5
0083:  BCF    05.1
0084:  BSF    03.5
0085:  BCF    05.1
....................    delay_ms(2);           
0086:  MOVLW  02
0087:  BCF    03.5
0088:  MOVWF  25
0089:  CALL   026
.................... } 
008A:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void lcd_yaz(byte k) 
.................... {  
....................    data_tara(k>>4);    
*
00B7:  SWAPF  22,W
00B8:  MOVWF  23
00B9:  MOVLW  0F
00BA:  ANDWF  23,F
00BB:  MOVF   23,W
00BC:  MOVWF  26
00BD:  CALL   03B
....................    output_bit(rs,1);       
00BE:  BSF    05.0
00BF:  BSF    03.5
00C0:  BCF    05.0
....................    delay_cycles(1);          
00C1:  NOP
....................    output_bit(e,1);        
00C2:  BCF    03.5
00C3:  BSF    05.1
00C4:  BSF    03.5
00C5:  BCF    05.1
....................    delay_cycles(1);       
00C6:  NOP
....................    output_bit(e,0); 
00C7:  BCF    03.5
00C8:  BCF    05.1
00C9:  BSF    03.5
00CA:  BCF    05.1
....................    delay_ms(2);          
00CB:  MOVLW  02
00CC:  BCF    03.5
00CD:  MOVWF  25
00CE:  CALL   026
....................  
....................    data_tara(k&0x0F);  
00CF:  MOVF   22,W
00D0:  ANDLW  0F
00D1:  MOVWF  23
00D2:  MOVWF  26
00D3:  CALL   03B
....................    output_bit(rs,1);       
00D4:  BSF    05.0
00D5:  BSF    03.5
00D6:  BCF    05.0
....................    delay_cycles(1);          
00D7:  NOP
....................    output_bit(e,1);       
00D8:  BCF    03.5
00D9:  BSF    05.1
00DA:  BSF    03.5
00DB:  BCF    05.1
....................    delay_cycles(1);      
00DC:  NOP
....................    output_bit(e,0); 
00DD:  BCF    03.5
00DE:  BCF    05.1
00DF:  BSF    03.5
00E0:  BCF    05.1
....................    delay_ms(2);          
00E1:  MOVLW  02
00E2:  BCF    03.5
00E3:  MOVWF  25
00E4:  CALL   026
.................... } 
00E5:  RETLW  00
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void adres(byte x, byte y) 
.................... { 
....................    if (y==1)      
00E6:  DECFSZ 22,W
00E7:  GOTO   0EE
....................       lcd_command(0x80|(x-1)); 
00E8:  MOVLW  01
00E9:  SUBWF  21,W
00EA:  IORLW  80
00EB:  MOVWF  23
00EC:  MOVWF  24
00ED:  CALL   05C
....................  
....................    if (y==2)      
00EE:  MOVF   22,W
00EF:  SUBLW  02
00F0:  BTFSS  03.2
00F1:  GOTO   0F9
....................       lcd_command(0x80|(0x40+(x-1))); 
00F2:  MOVLW  01
00F3:  SUBWF  21,W
00F4:  ADDLW  40
00F5:  IORLW  80
00F6:  MOVWF  23
00F7:  MOVWF  24
00F8:  CALL   05C
.................... } 
00F9:  GOTO   131 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void lcd_ayarla() 
.................... { 
....................    int j=0; 
*
008B:  CLRF   21
....................    output_bit(rs,0);  
008C:  BCF    05.0
008D:  BSF    03.5
008E:  BCF    05.0
....................    output_bit(e,0);   
008F:  BCF    03.5
0090:  BCF    05.1
0091:  BSF    03.5
0092:  BCF    05.1
....................    delay_ms(30);    
0093:  MOVLW  1E
0094:  BCF    03.5
0095:  MOVWF  25
0096:  CALL   026
....................     
....................    for(j=0;j<=3;j++)     
0097:  CLRF   21
0098:  MOVF   21,W
0099:  SUBLW  03
009A:  BTFSS  03.0
009B:  GOTO   0A4
....................    { 
....................       lcd_command(0x03); 
009C:  MOVLW  03
009D:  MOVWF  24
009E:  CALL   05C
....................       delay_ms(5);       
009F:  MOVLW  05
00A0:  MOVWF  25
00A1:  CALL   026
....................    } 
00A2:  INCF   21,F
00A3:  GOTO   098
....................     
....................    lcd_command(0x02);  
00A4:  MOVLW  02
00A5:  MOVWF  24
00A6:  CALL   05C
....................    lcd_command(0x28);  
00A7:  MOVLW  28
00A8:  MOVWF  24
00A9:  CALL   05C
....................    lcd_command(0x08);  
00AA:  MOVLW  08
00AB:  MOVWF  24
00AC:  CALL   05C
....................    lcd_command(0x0C);  
00AD:  MOVLW  0C
00AE:  MOVWF  24
00AF:  CALL   05C
....................    lcd_command(0x06);  
00B0:  MOVLW  06
00B1:  MOVWF  24
00B2:  CALL   05C
....................    lcd_command(0x01);  
00B3:  MOVLW  01
00B4:  MOVWF  24
00B5:  CALL   05C
.................... } 
00B6:  GOTO   122 (RETURN)
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
.................... void lcd_sil() 
.................... { 
....................    lcd_command(0x01); 
.................... } 
....................  
.................... //////////////////////////////////////////////////////////////////////////////// 
....................  
....................  
.................... //unsigned char dizi[]={'1','2','3','4'}; 
.................... //unsigned char i=0; 
....................  
....................  
.................... #define btn1 pin_a2 
.................... #define btn2 pin_a3 
.................... #define btn4 pin_a4 
.................... #define btn8 pin_b0 
....................  
....................  
....................  
.................... char btn_oku(){ 
....................              unsigned char tus=0; 
*
00FA:  CLRF   21
....................               
....................              if(input(btn1)){ tus |=0x01;  } 
00FB:  BSF    03.5
00FC:  BSF    05.2
00FD:  BCF    03.5
00FE:  BTFSC  05.2
00FF:  BSF    21.0
....................              if(input(btn2)){ tus |=0x02; } 
0100:  BSF    03.5
0101:  BSF    05.3
0102:  BCF    03.5
0103:  BTFSC  05.3
0104:  BSF    21.1
....................              if(input(btn4)){ tus |=0x04; } 
0105:  BSF    03.5
0106:  BSF    05.4
0107:  BCF    03.5
0108:  BTFSC  05.4
0109:  BSF    21.2
....................              if(input(btn8)){ tus |=0x08; } 
010A:  BSF    03.5
010B:  BSF    06.0
010C:  BCF    03.5
010D:  BTFSC  06.0
010E:  BSF    21.3
....................  
.................... return tus; 
010F:  MOVF   21,W
0110:  MOVWF  78
....................  
.................... } 
0111:  RETLW  00
....................  
....................  
....................  
.................... void main(){ 
0112:  CLRF   04
0113:  BCF    03.7
0114:  MOVLW  1F
0115:  ANDWF  03,F
0116:  BSF    03.5
0117:  BSF    0E.3
0118:  MOVLW  19
0119:  MOVWF  19
011A:  MOVLW  A2
011B:  MOVWF  18
011C:  MOVLW  90
011D:  BCF    03.5
011E:  MOVWF  18
011F:  MOVLW  07
0120:  MOVWF  1F
....................  
....................     lcd_ayarla(); 
0121:  GOTO   08B
....................     lcd_yaz("sistem icin"); 
0122:  CLRF   21
0123:  MOVF   21,W
0124:  CALL   004
0125:  IORLW  00
0126:  BTFSC  03.2
0127:  GOTO   12C
0128:  INCF   21,F
0129:  MOVWF  22
012A:  CALL   0B7
012B:  GOTO   123
....................     adres(1,2); 
012C:  MOVLW  01
012D:  MOVWF  21
012E:  MOVLW  02
012F:  MOVWF  22
0130:  GOTO   0E6
....................     lcd_yaz("SIFRE GIRIN.."); 
0131:  CLRF   21
0132:  MOVF   21,W
0133:  CALL   014
0134:  IORLW  00
0135:  BTFSC  03.2
0136:  GOTO   13B
0137:  INCF   21,F
0138:  MOVWF  22
0139:  CALL   0B7
013A:  GOTO   132
....................  
.................... /*for(i=0;i<4;i++){ 
....................     
....................      putc(dizi[i]); 
....................       delay_ms(50); 
....................                    
....................      }*/ 
....................   while(1){ 
....................    
....................       while(btn_oku()!=0) { 
013B:  CALL   0FA
013C:  MOVF   78,F
013D:  BTFSC  03.2
013E:  GOTO   14A
....................          
....................                // printf (lcd_yaz,"%d", btn_oku()); 
....................                 putc(btn_oku()); 
013F:  CALL   0FA
0140:  MOVF   78,W
0141:  MOVWF  21
0142:  MOVF   78,W
0143:  BTFSS  0C.4
0144:  GOTO   143
0145:  MOVWF  19
....................          
....................                 delay_ms(250); 
0146:  MOVLW  FA
0147:  MOVWF  25
0148:  CALL   026
....................         } 
0149:  GOTO   13B
....................    
....................    
....................    
....................   } 
014A:  GOTO   13B
....................    
....................   
.................... } 
....................  
....................  
....................  
....................  
....................  
014B:  SLEEP

Configuration Fuses:
   Word  1: 3F50   NOWDT PUT NOPROTECT BROWNOUT NOMCLR NOLVP INTRC_IO NOCPD
